In this lesson, you created a middleware function called asyncWrapper. Why?

asyncWrapper simplifies error handling for asynchronous Express middleware functions by wrapping them with async/await,
 support and ensuring any errors are passed to Express's error handling middleware.



 #    Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    // your code here
     
      const error = new CustomAPIError(`Task with id ${taskID} not found`, 404);
    return next(error);
  
  }  
  res.status(200).json({ task });  
});  


 